<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<http pattern="/oauth/token" create-session="stateless"
		use-expressions="false" authentication-manager-ref="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request 
			parameters -->
		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>


	<authentication-manager id="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>

	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<!-- <constructor-arg ref="clientDetails" /> -->
		<!-- reference of class annnotated @Component with name customClientDetailServiceImpl -->
		<constructor-arg ref="customClientDetailServiceImpl" />
	</bean>

	<!-- <bean id="clientDetails" class="org.ateam.common.service.ClientService"/> -->

	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
		<property name="exceptionTranslator" ref="customWWebResponseExceptionTranslator" />
	</bean>




	<!-- The OAuth2 protected resources are separated out into their own block 
		so we can deal with authorization and error handling separately. This isn't 
		mandatory, but it makes it easier to control the behaviour. access-decision-manager-ref="accessDecisionManager" -->
		
	<sec:http pattern="/createUser" security="none" />	
	<sec:http pattern="/activateUser" security="none" />	
	<sec:http pattern="/signin" security="none" />	
	<http pattern="/*" create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">

		<anonymous enabled="false" />
		<intercept-url pattern="/*" access="ROLE_USER" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />

	</http>

	<bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="happyTourist" />
	</bean>

	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="happyTourist/client" />
		<property name="typeName" value="Basic" />
	</bean>



	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
			</list>
		</constructor-arg>
	</bean>



	<authentication-manager alias="authenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="customUserDetailsServiceImpl">
			<!-- <password-encoder ref="passwordEncoder" /> -->
			<password-encoder hash="md5" />
		</authentication-provider>
	</authentication-manager>



	<!-- Used for the persistenceof tokens (currently an in memory implementation) -->
	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<!-- <property name="clientDetailsService" ref="clientDetails" /> -->
		<property name="clientDetailsService" ref="customClientDetailServiceImpl" />
	</bean>
	<bean id="tokenGenForSignUp" class="com.happyTourist.serviceimpl.TokenGenerator">
		<property name="defaultTokenServices" ref="tokenServices" />
		<!-- <property name="oauthRepository" ref="clientOauthDetailsRepository" /> -->
	</bean>
	
	<bean id="oAuth2RequestFactory"
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
		<!-- <constructor-arg ref="clientDetails" /> -->
		<constructor-arg ref="customClientDetailServiceImpl" />
	</bean>

	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
		<property name="tokenStore" ref="tokenStore" />
		<property name="requestFactory" ref="oAuth2RequestFactory" />
	</bean>
	

	<!-- authorization-server aka AuthorizationServerTokenServices is an interface 
		that defines everything necessary for token management -->
	<!-- <oauth:authorization-server client-details-service-ref="clientDetails" 
		token-services-ref="tokenServices" user-approval-handler-ref="userApprovalHandler"> 
		<oauth:authorization-code /> <oauth:implicit /> <oauth:refresh-token /> <oauth:client-credentials 
		/> <oauth:password /> </oauth:authorization-server> -->
	<oauth:authorization-server
		client-details-service-ref="customClientDetailServiceImpl"
		token-services-ref="tokenServices" user-approval-handler-ref="userApprovalHandler">
		<oauth:refresh-token />
		<oauth:password />
	</oauth:authorization-server>
	<oauth:resource-server id="resourceServerFilter"
		entry-point-ref="oauthAuthenticationEntryPoint" resource-id="rest_api"
		token-services-ref="tokenServices" />


	<!-- <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true"> 
		you could also wire in the expression handler up at the layer of the http 
		filters. See https://jira.springsource.org/browse/SEC-1452 <sec:expression-handler 
		ref="oauthExpressionHandler" /> </sec:global-method-security> <oauth:expression-handler 
		id="oauthExpressionHandler" /> <oauth:web-expression-handler id="oauthWebExpressionHandler" 
		/> -->
</beans>